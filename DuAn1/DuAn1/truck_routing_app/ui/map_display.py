"""
Map display module for visualizing the routing environment.
Implements functions for drawing maps, routes, and animations using Streamlit.
"""

import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import os
import numpy as np
import io
import math
from core.algorithms.base_search import OBSTACLE_CELL, ROAD_CELL, TOLL_CELL, GAS_STATION_CELL

# ƒê∆∞·ªùng d·∫´n t·ªõi c√°c icon
ICONS_PATH = os.path.join(os.path.dirname(__file__), 'units')

# H·∫±ng s·ªë x√°c ƒë·ªãnh lo·∫°i √¥
OBSTACLE_VALUE = OBSTACLE_CELL  # ƒê·ªìng b·ªô v·ªõi base_search.py
ROAD_VALUE = ROAD_CELL
TOLL_VALUE = TOLL_CELL
GAS_STATION_VALUE = GAS_STATION_CELL

def create_basic_icon(emoji, size=(64, 64), bg_color=None):
    """
    T·∫°o icon ƒë∆°n gi·∫£n v·ªõi emoji
    
    Parameters:
    - emoji: Emoji text hi·ªÉn th·ªã 
    - size: K√≠ch th∆∞·ªõc icon
    - bg_color: M√†u n·ªÅn
    
    Returns:
    - ƒê·ªëi t∆∞·ª£ng h√¨nh ·∫£nh PIL
    """
    try:
        # T·∫°o h√¨nh n·ªÅn
        img = Image.new("RGBA", size, bg_color if bg_color else (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # C·ªë g·∫Øng load font emoji
        try:
            # Th·ª≠ t·∫£i font c√≥ h·ªó tr·ª£ emoji v·ªõi k√≠ch th∆∞·ªõc l·ªõn
            font_size = int(size[0] * 0.6)  # 60% k√≠ch th∆∞·ªõc icon
            try:
                # Th·ª≠ c√°c font ph·ªï bi·∫øn h·ªó tr·ª£ emoji
                font_options = ["segoe ui emoji", "apple color emoji", "noto color emoji", "arial", "sans-serif"]
                font = None
                
                for font_name in font_options:
                    try:
                        font = ImageFont.truetype(font_name, font_size)
                        break
                    except:
                        continue
                
                if font is None:
                    font = ImageFont.load_default()
            except:
                font = ImageFont.load_default()
        except:
            font = ImageFont.load_default()
        
        # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ ƒë·∫∑t emoji gi·ªØa h√¨nh
        try:
            # Ph∆∞∆°ng th·ª©c m·ªõi trong Pillow m·ªõi h∆°n
            left, top, right, bottom = draw.textbbox((0, 0), emoji, font=font)
            text_width = right - left
            text_height = bottom - top
        except AttributeError:
            # Fallback cho Pillow c≈© h∆°n
            try:
                text_width, text_height = draw.textsize(emoji, font=font)
            except:
                text_width, text_height = font_size, font_size
                
        position = ((size[0] - text_width) // 2, (size[1] - text_height) // 2)
        
        # V·∫Ω emoji
        draw.text(position, emoji, fill="white", font=font)
        
        return img
    except Exception as e:
        # T·∫°o m·ªôt icon ƒë∆°n gi·∫£n n·∫øu c√≥ l·ªói
        img = Image.new("RGBA", size, bg_color if bg_color else (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # V·∫Ω m·ªôt h√¨nh vu√¥ng v·ªõi ch·ªØ c√°i ƒë·∫ßu ti√™n
        if emoji and len(emoji) > 0:
            letter = emoji[0] if isinstance(emoji, str) else "?"
            # V·∫Ω ch·ªØ c√°i ·ªü gi·ªØa
            draw.text((size[0]//3, size[1]//3), letter, fill="white")
        
        return img

def load_modern_icons():
    """T·∫°o c√°c icon hi·ªán ƒë·∫°i cho b·∫£n ƒë·ªì"""
    icons = {}
    
    # M√†u s·∫Øc theo phong c√°ch Material Design
    colors = {
        'truck': (33, 150, 243, 255),    # Xanh d∆∞∆°ng - #2196F3
        'gas': (76, 175, 80, 255),       # Xanh l√° - #4CAF50
        'toll': (244, 67, 54, 255),      # ƒê·ªè - #F44336
        'brick': (121, 85, 72, 255),     # N√¢u - #795548
        'road': (66, 66, 66, 255)        # X√°m ƒë·∫≠m - #424242
    }
    
    # Emoji text ƒë∆°n gi·∫£n 
    emojis = {
        'truck': 'üöö',
        'gas': '‚õΩ',
        'toll': 'üöß',
        'brick': 'üß±',
        'road': 'üõ£Ô∏è'
    }
    
    # T·∫°o c√°c icon
    for name, color in colors.items():
        try:
            icons[name] = create_basic_icon(
                emojis[name], 
                bg_color=color
            )
        except Exception as e:
            # T·∫°o icon d·ª± ph√≤ng n·∫øu g·∫∑p l·ªói
            img = Image.new("RGBA", (64, 64), color)
            draw = ImageDraw.Draw(img)
            draw.rectangle([5, 5, 59, 59], fill=color, outline=(255, 255, 255, 128))
            icons[name] = img
    
    return icons

# Bi·∫øn global ƒë·ªÉ l∆∞u tr·ªØ c√°c icon ƒë√£ t·∫£i
ICONS = None

def get_icons():
    """Tr·∫£ v·ªÅ c√°c icon ƒë√£ t·∫£i ho·∫∑c t·∫£i m·ªõi n·∫øu ch∆∞a c√≥"""
    global ICONS
    if ICONS is None:
        try:
            ICONS = load_modern_icons()
        except Exception:
            # T·∫°o icons ƒë∆°n gi·∫£n n·∫øu c√≥ l·ªói
            ICONS = {
                'truck': Image.new("RGBA", (64, 64), (33, 150, 243, 255)),
                'gas': Image.new("RGBA", (64, 64), (76, 175, 80, 255)),
                'toll': Image.new("RGBA", (64, 64), (244, 67, 54, 255)),
                'brick': Image.new("RGBA", (64, 64), (121, 85, 72, 255)),
                'road': Image.new("RGBA", (64, 64), (66, 66, 66, 255))
            }
    return ICONS

def get_cell_type_name(cell_type):
    """Tr·∫£ v·ªÅ t√™n lo·∫°i √¥ d·ª±a tr√™n gi√° tr·ªã"""
    types = {
        -1: "V·ªã tr√≠ xe t·∫£i",
        0: "ƒê∆∞·ªùng th√¥ng th∆∞·ªùng",
        1: "Tr·∫°m thu ph√≠",
        2: "Tr·∫°m xƒÉng",
        3: "V·∫≠t c·∫£n"
    }
    return types.get(cell_type, "Kh√¥ng x√°c ƒë·ªãnh")

def _draw_map_simple(map_data, start_pos=None):
    """Phi√™n b·∫£n ƒë∆°n gi·∫£n nh·∫•t cho hi·ªÉn th·ªã b·∫£n ƒë·ªì khi c√≥ l·ªói"""
    grid = map_data.grid
    size = grid.shape[0]
    
    # S·ª≠ d·ª•ng start_pos t·ª´ tham s·ªë n·∫øu ƒë∆∞·ª£c cung c·∫•p, n·∫øu kh√¥ng l·∫•y t·ª´ map_data
    if start_pos is None and hasattr(map_data, 'start_pos'):
        start_pos = map_data.start_pos
        
    # L·∫•y end_pos t·ª´ map_data n·∫øu c√≥
    end_pos = None
    if hasattr(map_data, 'end_pos'):
        end_pos = map_data.end_pos
    
    st.write("#### B·∫£n ƒë·ªì (Phi√™n b·∫£n ƒë∆°n gi·∫£n)")
    
    emojis = {
        'truck': 'üöö',
        'gas': '‚õΩ',
        'toll': 'üöß',
        'brick': 'üß±',
        'road': 'üõ£Ô∏è',
        'end': 'üèÅ'
    }
    
    # T·∫°o b·∫£ng d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì
    map_table = []
    for i in range(size):
        row = []
        for j in range(size):
            cell_type = grid[i][j]
            
            # X√°c ƒë·ªãnh emoji hi·ªÉn th·ªã
            if start_pos and (i, j) == start_pos:
                emoji = emojis['truck']
            elif end_pos and (i, j) == end_pos:
                emoji = emojis['end']
            elif cell_type == 1:
                emoji = emojis['toll']
            elif cell_type == 2:
                emoji = emojis['gas']
            elif cell_type == -1:
                emoji = emojis['brick']
            else:
                emoji = emojis['road']
                
            row.append(emoji)
        map_table.append(row)
    
    # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng
    st.table(map_table)

def get_grid_from_map_data(map_data):
    """Tr√≠ch xu·∫•t grid t·ª´ map_data m·ªôt c√°ch nh·∫•t qu√°n."""
    if hasattr(map_data, 'grid'):
        return map_data.grid
    return map_data

def is_valid_position(grid, pos):
    """Ki·ªÉm tra m·ªôt v·ªã tr√≠ c√≥ n·∫±m trong l∆∞·ªõi h·ª£p l·ªá kh√¥ng."""
    try:
        return (0 <= pos[0] < grid.shape[1] and 0 <= pos[1] < grid.shape[0])
    except:
        return False

def is_obstacle_cell(grid, pos):
    """Ki·ªÉm tra m·ªôt √¥ c√≥ ph·∫£i l√† ch∆∞·ªõng ng·∫°i v·∫≠t kh√¥ng."""
    try:
        if not is_valid_position(grid, pos):
            return True  # Coi nh∆∞ √¥ ngo√†i bi√™n l√† ch∆∞·ªõng ng·∫°i v·∫≠t
        return grid[pos[1], pos[0]] == OBSTACLE_VALUE
    except Exception as e:
        print(f"Error checking cell at {pos}: {str(e)}")
        return True  # Coi nh∆∞ √¥ l·ªói l√† ch∆∞·ªõng ng·∫°i v·∫≠t ƒë·ªÉ an to√†n

def filter_obstacle_cells(grid, positions):
    """
    L·ªçc b·ªè c√°c √¥ ch∆∞·ªõng ng·∫°i v·∫≠t t·ª´ danh s√°ch v·ªã tr√≠ ƒë·∫ßu v√†o.
    Ch·ªâ lo·∫°i b·ªè c√°c √¥ l√† ch∆∞·ªõng ng·∫°i v·∫≠t, kh√¥ng c·ªë g·∫Øng s·ª≠a ch·ªØa t√≠nh li√™n t·ª•c.
    
    Args:
        grid: L∆∞·ªõi ch·ª©a th√¥ng tin v·ªÅ c√°c √¥
        positions: Danh s√°ch c√°c v·ªã tr√≠ c·∫ßn ki·ªÉm tra
        
    Returns:
        List[Tuple[int, int]]: Danh s√°ch c√°c v·ªã tr√≠ m√† kh√¥ng ch·ª©a √¥ ch∆∞·ªõng ng·∫°i v·∫≠t
    """
    if not positions or len(positions) < 1:
        return positions
    
    # L·ªçc b·ªè c√°c √¥ ch∆∞·ªõng ng·∫°i v·∫≠t
    filtered = []
    obstacles_found = False
    obstacles_count = 0
    
    for pos in positions:
        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa v·ªã tr√≠
        if not is_valid_position(grid, pos):
            print(f"WARNING: V·ªã tr√≠ {pos} n·∫±m ngo√†i l∆∞·ªõi, b·ªè qua.")
            obstacles_found = True
            obstacles_count += 1
            continue
            
        # Ki·ªÉm tra ch·∫Øc ch·∫Øn r·∫±ng √¥ kh√¥ng ph·∫£i l√† ch∆∞·ªõng ng·∫°i v·∫≠t
        if not is_obstacle_cell(grid, pos):
            filtered.append(pos)
        else:
            obstacles_found = True
            obstacles_count += 1
            print(f"C·∫¢NH B√ÅO: L·ªçc b·ªè √¥ ch∆∞·ªõng ng·∫°i v·∫≠t t·∫°i {pos}")
    
    if obstacles_found:
        print(f"C·∫¢NH B√ÅO: ƒê√£ ph√°t hi·ªán v√† l·ªçc b·ªè {obstacles_count} √¥ ch∆∞·ªõng ng·∫°i v·∫≠t t·ª´ danh s√°ch c√≥ {len(positions)} v·ªã tr√≠")
        if obstacles_count > 0:
            st.warning(f"‚ö†Ô∏è ƒê√£ ph√°t hi·ªán v√† l·ªçc b·ªè {obstacles_count} √¥ ch∆∞·ªõng ng·∫°i v·∫≠t")
    
    return filtered

def find_path_between(grid, start, end):
    """
    T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t gi·ªØa hai ƒëi·ªÉm kh√¥ng li·ªÅn k·ªÅ s·ª≠ d·ª•ng BFS.
    Ch·ªâ ƒëi qua c√°c √¥ kh√¥ng ph·∫£i ch∆∞·ªõng ng·∫°i v·∫≠t.
    """
    if start == end:
        return [start]
    
    from collections import deque
    
    # S·ª≠ d·ª•ng BFS ƒë·ªÉ t√¨m ƒë∆∞·ªùng ƒëi
    queue = deque([(start, [start])])
    visited = set([start])
    
    # C√°c h∆∞·ªõng di chuy·ªÉn: l√™n, ph·∫£i, xu·ªëng, tr√°i
    directions = [(0, -1), (1, 0), (0, 1), (-1, 0)]
    
    while queue:
        (current, path) = queue.popleft()
        
        # L·∫•y c√°c √¥ li·ªÅn k·ªÅ
        for dx, dy in directions:
            next_x, next_y = current[0] + dx, current[1] + dy
            next_pos = (next_x, next_y)
            
            # Ki·ªÉm tra √¥ c√≥ h·ª£p l·ªá kh√¥ng
            if not is_valid_position(grid, next_pos):
                continue
                
            # Ki·ªÉm tra kh√¥ng ph·∫£i √¥ ch∆∞·ªõng ng·∫°i v·∫≠t
            if is_obstacle_cell(grid, next_pos):
                continue
                
            # Ki·ªÉm tra ƒë√£ ƒë·∫øn ƒë√≠ch ch∆∞a
            if next_pos == end:
                return path + [end]
            
            # Ki·ªÉm tra ƒë√£ thƒÉm ch∆∞a
            if next_pos not in visited:
                visited.add(next_pos)
                queue.append((next_pos, path + [next_pos]))
                
                # Gi·ªõi h·∫°n t√¨m ki·∫øm ƒë·ªÉ tr√°nh tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi
                if len(visited) > 1000:
                    return None
    
    # Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi
    return None

def draw_map(map_data, start_pos=None, visited=None, current_neighbors=None, current_pos=None, path=None):
    """
    V·∫Ω b·∫£n ƒë·ªì v·ªõi c√°c icon s·ª≠ d·ª•ng th√†nh ph·∫ßn b·∫£n ƒë·ªãa c·ªßa Streamlit
    
    Parameters:
    - map_data: ƒê·ªëi t∆∞·ª£ng Map ch·ª©a th√¥ng tin b·∫£n ƒë·ªì
    - start_pos: Tuple (row, col) ch·ªâ v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa xe (n·∫øu c√≥) - L∆ØU √ù: API n√†y nh·∫≠n (row, col) nh∆∞ng n√™n nh·∫•t qu√°n (x,y)
    - visited: List c√°c v·ªã tr√≠ ƒë√£ thƒÉm (x,y)
    - current_neighbors: List c√°c v·ªã tr√≠ h√†ng x√≥m ƒëang x√©t (x,y)
    - current_pos: Tuple (x,y) ch·ªâ v·ªã tr√≠ hi·ªán t·∫°i
    - path: List c√°c v·ªã tr√≠ (x,y) tr√™n ƒë∆∞·ªùng ƒëi t√¨m ƒë∆∞·ª£c
    """
    try:
        # L·∫•y grid t·ª´ map_data m·ªôt c√°ch nh·∫•t qu√°n
        grid = get_grid_from_map_data(map_data)
        size = grid.shape[0] # Gi·∫£ s·ª≠ l√† b·∫£n ƒë·ªì vu√¥ng
        
        # KI·ªÇM TRA KH·∫®N C·∫§P: ƒê·∫£m b·∫£o ƒë∆∞·ªùng ƒëi kh√¥ng ch·ª©a ch∆∞·ªõng ng·∫°i v·∫≠t
        if path:
            obstacles_in_path = []
            for pos_xy in path: # path ch·ª©a (x,y)
                if is_obstacle_cell(grid, pos_xy): # is_obstacle_cell nh·∫≠n (x,y)
                    obstacles_in_path.append(pos_xy)
            
            if obstacles_in_path:
                st.error(f"‚ùå L·ªñI NGHI√äM TR·ªåNG: ƒê∆∞·ªùng ƒëi ch·ª©a {len(obstacles_in_path)} √¥ ch∆∞·ªõng ng·∫°i v·∫≠t t·∫°i v·ªã tr√≠: {obstacles_in_path[:5]}{'...' if len(obstacles_in_path) > 5 else ''}")
                st.warning("‚ö†Ô∏è ƒê∆∞·ªùng ƒëi kh√¥ng h·ª£p l·ªá! C√≥ l·ªói nghi√™m tr·ªçng trong thu·∫≠t to√°n t√¨m ƒë∆∞·ªùng! Ki·ªÉm tra l·∫°i thu·∫≠t to√°n v√† ph∆∞∆°ng th·ª©c validate_path_no_obstacles.")
        
        # L·ªçc t·∫•t c·∫£ c√°c danh s√°ch v·ªã tr√≠ ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ √¥ ch∆∞·ªõng ng·∫°i v·∫≠t
        # filter_obstacle_cells nh·∫≠n (grid, list_of_xy_positions)
        if path:
            original_path_len = len(path)
            filtered_path_display_only = filter_obstacle_cells(grid, path) # D√πng ƒë·ªÉ hi·ªÉn th·ªã l·ªói, kh√¥ng thay ƒë·ªïi path g·ªëc
            if len(filtered_path_display_only) < original_path_len:
                st.error(f"‚ö†Ô∏è L·ªñI HI·ªÇN TH·ªä: ƒê∆∞·ªùng ƒëi ch·ª©a {original_path_len - len(filtered_path_display_only)} √¥ ch∆∞·ªõng ng·∫°i v·∫≠t b·ªã l·ªçc b·ªüi filter_obstacle_cells!")
                print(f"CRITICAL: draw_map's filter_obstacle_cells removed {original_path_len - len(filtered_path_display_only)} obstacles from path for display purposes!")
            
        if visited:
            original_visited_len = len(visited)
            # visited ƒë∆∞·ª£c truy·ªÅn v√†o l√† list (x,y)
            visited_for_display = filter_obstacle_cells(grid, visited) # visited_for_display gi·ªù l√† list (x,y) ƒë√£ l·ªçc
            if len(visited_for_display) < original_visited_len:
                print(f"ƒê√£ l·ªçc b·ªè {original_visited_len - len(visited_for_display)} √¥ ch∆∞·ªõng ng·∫°i v·∫≠t t·ª´ danh s√°ch ƒë√£ thƒÉm (hi·ªÉn th·ªã)")
        else:
            visited_for_display = []

        if current_neighbors:
            original_neighbors_len = len(current_neighbors)
            # current_neighbors ƒë∆∞·ª£c truy·ªÅn v√†o l√† list (x,y)
            current_neighbors_for_display = filter_obstacle_cells(grid, current_neighbors) # current_neighbors_for_display l√† (x,y) ƒë√£ l·ªçc
            if len(current_neighbors_for_display) < original_neighbors_len:
                print(f"ƒê√£ l·ªçc b·ªè {original_neighbors_len - len(current_neighbors_for_display)} √¥ ch∆∞·ªõng ng·∫°i v·∫≠t t·ª´ danh s√°ch l√¢n c·∫≠n (hi·ªÉn th·ªã)")
        else:
            current_neighbors_for_display = []
        
        # Ki·ªÉm tra v·ªã tr√≠ hi·ªán t·∫°i (x,y)
        if current_pos and is_obstacle_cell(grid, current_pos): # current_pos l√† (x,y)
            st.error(f"‚ùå V·ªã tr√≠ hi·ªán t·∫°i {current_pos} l√† √¥ ch∆∞·ªõng ng·∫°i v·∫≠t v√† s·∫Ω b·ªã b·ªè qua!")
            current_pos_for_display = None # Kh√¥ng hi·ªÉn th·ªã current_pos n·∫øu l√† ch∆∞·ªõng ng·∫°i v·∫≠t
        else:
            current_pos_for_display = current_pos

        # start_pos v√† end_pos t·ª´ map_data c√≥ th·ªÉ l√† (h√†ng, c·ªôt) ho·∫∑c (y,x) t√πy thu·ªôc v√†o c√°ch n√≥ ƒë∆∞·ª£c t·∫°o
        # Gi·∫£ ƒë·ªãnh r·∫±ng start_pos ƒë∆∞·ª£c truy·ªÅn v√†o h√†m n√†y l√† (x,y) ƒë·ªÉ nh·∫•t qu√°n
        # T∆∞∆°ng t·ª± cho end_pos t·ª´ map_data
        
        # Ki·ªÉm tra c√°c th√†nh ph·∫ßn kh√°c (gi·∫£ s·ª≠ start_pos v√† end_pos l√† (x,y))
        if start_pos and is_obstacle_cell(grid, start_pos): 
            st.error(f"‚ùå V·ªã tr√≠ b·∫Øt ƒë·∫ßu {start_pos} l√† √¥ ch∆∞·ªõng ng·∫°i v·∫≠t!")
        
        end_pos_xy = None
        if hasattr(map_data, 'end_pos') and map_data.end_pos:
            # Gi·∫£ ƒë·ªãnh map_data.end_pos l√† (x,y)
            end_pos_xy = map_data.end_pos 
            if is_obstacle_cell(grid, end_pos_xy):
                st.error(f"‚ùå V·ªã tr√≠ k·∫øt th√∫c {end_pos_xy} l√† √¥ ch∆∞·ªõng ng·∫°i v·∫≠t!")
        
        st.write("### üó∫Ô∏è B·∫£n ƒë·ªì")
        
        # CSS cho b·∫£n ƒë·ªì v√† animation (ch·ªânh m√†u hi·ªáu ·ª©ng l·ªói)
        st.markdown("""
        <style>
        .map-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .map-container table {
            border-collapse: collapse;
        }
        .map-container td {
            width: 60px;
            height: 60px;
            text-align: center;
            font-size: 24px;
            padding: 0;
            position: relative;
            transition: all 0.3s ease;
        }
        .map-container td > div {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.3s ease;
        }
        .visited-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(100, 181, 246, 0.6) !important;
            z-index: 1;
            animation: fadeIn 0.5s ease;
        }
        .neighbor-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 215, 0, 0.3);
            border: 2px dashed #ffd700;
            z-index: 2;
            animation: pulse 1s infinite;
        }
        .current-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 69, 0, 0.5);
            z-index: 3;
            animation: highlight 1s infinite;
        }
        .path-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(76, 175, 80, 0.5);
            border: 2px solid #4CAF50;
            z-index: 2;
        }
        .obstacle-in-path-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 0, 0, 0.7) !important;
            border: 3px solid #FF0000;
            z-index: 10 !important;
            animation: errorBlink 1s infinite;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes pulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.05); opacity: 0.5; }
            100% { transform: scale(1); opacity: 0.8; }
        }
        @keyframes highlight {
            0% { background-color: rgba(255, 69, 0, 0.5); }
            50% { background-color: rgba(255, 69, 0, 0.8); }
            100% { background-color: rgba(255, 69, 0, 0.5); }
        }
        @keyframes errorBlink {
            0% { background-color: rgba(255, 0, 0, 0.7); }
            50% { background-color: rgba(255, 0, 0, 1); }
            100% { background-color: rgba(255, 0, 0, 0.7); }
        }
        .cell-content {
            position: relative;
            z-index: 4;
        }
        </style>
        """, unsafe_allow_html=True)
        
        # T·∫°o b·∫£ng d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì
        # V√≤ng l·∫∑p i: h√†ng (y), j: c·ªôt (x)
        map_table = []
        for i_row in range(size): # i_row l√† y
            row = []
            for j_col in range(size): # j_col l√† x
                current_cell_xy = (j_col, i_row) # T·ªça ƒë·ªô (x,y) c·ªßa √¥ ƒëang x√©t
                cell_type = grid[i_row, j_col] # Truy c·∫≠p grid b·∫±ng (h√†ng, c·ªôt) t·ª©c (y,x)
                
                # X√°c ƒë·ªãnh emoji v√† background color cho √¥
                # So s√°nh current_pos_for_display (x,y) v·ªõi current_cell_xy (x,y)
                if current_pos_for_display and current_cell_xy == current_pos_for_display:
                    cell_content = "üöö"
                    bg_color = "#e3f2fd"
                # So s√°nh start_pos (x,y) v·ªõi current_cell_xy (x,y)
                elif start_pos and current_cell_xy == start_pos and not current_pos_for_display and not visited_for_display:
                    cell_content = "üöö"
                    bg_color = "#e3f2fd"
                # So s√°nh end_pos_xy (x,y) v·ªõi current_cell_xy (x,y)
                elif end_pos_xy and current_cell_xy == end_pos_xy:
                    cell_content = "üèÅ"
                    bg_color = "#fff9c4"
                elif cell_type == TOLL_VALUE:
                    cell_content = "üöß"
                    bg_color = "#ffebee"
                elif cell_type == GAS_STATION_VALUE:
                    cell_content = "‚õΩ"
                    bg_color = "#e8f5e9"
                elif cell_type == OBSTACLE_VALUE:
                    cell_content = "üß±"
                    bg_color = "#efebe9"
                else: # ROAD_CELL
                    cell_content = "‚¨ú"
                    bg_color = "#ffffff"
                
                # Th√™m overlay cho c√°c hi·ªáu ·ª©ng
                overlays = ""
                # visited_for_display ch·ª©a (x,y)
                if visited_for_display and current_cell_xy in visited_for_display:
                    overlays += '<div class="visited-overlay"></div>'
                # current_neighbors_for_display ch·ª©a (x,y)
                if current_neighbors_for_display and current_cell_xy in current_neighbors_for_display:
                    overlays += '<div class="neighbor-overlay"></div>'
                # current_pos_for_display l√† (x,y)
                if current_pos_for_display and current_cell_xy == current_pos_for_display:
                    overlays += '<div class="current-overlay"></div>'
                
                # X·ª≠ l√Ω ƒë∆∞·ªùng ƒëi (path ch·ª©a (x,y))
                if path and current_cell_xy in path:
                    # Ki·ªÉm tra xem √¥ n√†y c√≥ ph·∫£i l√† ch∆∞·ªõng ng·∫°i v·∫≠t kh√¥ng
                    # is_obstacle_cell nh·∫≠n (grid, (x,y))
                    if is_obstacle_cell(grid, current_cell_xy):
                        overlays += '<div class="obstacle-in-path-overlay"></div>'
                        cell_content = "‚ùå"  # ƒê√°nh d·∫•u l·ªói
                    else:
                        overlays += '<div class="path-overlay"></div>'
                        # Kh√¥ng hi·ªÉn th·ªã m≈©i t√™n n·∫øu l√† v·ªã tr√≠ hi·ªán t·∫°i c·ªßa xe
                        if not current_pos_for_display or current_cell_xy != current_pos_for_display:
                            # Kh√¥ng hi·ªÉn th·ªã m≈©i t√™n ·ªü ƒëi·ªÉm cu·ªëi c·ªßa ƒë∆∞·ªùng ƒëi
                            if current_cell_xy != path[-1]: 
                                try:
                                    idx = path.index(current_cell_xy)
                                    if idx + 1 < len(path):
                                        next_pos_xy = path[idx + 1] # next_pos_xy l√† (x,y)
                                        # X√°c ƒë·ªãnh h∆∞·ªõng m≈©i t√™n t·ª´ current_cell_xy (x,y) ƒë·∫øn next_pos_xy (x,y)
                                        delta_x = next_pos_xy[0] - current_cell_xy[0]
                                        delta_y = next_pos_xy[1] - current_cell_xy[1]

                                        if delta_y < 0: # ƒêi l√™n (gi·∫£m y)
                                            cell_content = "‚¨ÜÔ∏è"
                                        elif delta_y > 0: # ƒêi xu·ªëng (tƒÉng y)
                                            cell_content = "‚¨áÔ∏è"
                                        elif delta_x < 0: # ƒêi tr√°i (gi·∫£m x)
                                            cell_content = "‚¨ÖÔ∏è"
                                        elif delta_x > 0: # ƒêi ph·∫£i (tƒÉng x)
                                            cell_content = "‚û°Ô∏è"
                                except ValueError:
                                    # current_cell_xy c√≥ th·ªÉ kh√¥ng n·∫±m trong path n·∫øu path b·ªã l·ªçc
                                    pass 
                
                # T·∫°o cell v·ªõi background color v√† overlay
                cell = f'<div style="background-color: {bg_color};">{overlays}<div class="cell-content">{cell_content}</div></div>'
                row.append(cell)
            map_table.append(row)
        
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng v·ªõi HTML
        st.markdown(
            f"""
            <div class="map-container">
                <table>
                    {''.join(f"<tr>{''.join(f'<td>{cell}</td>' for cell in row)}</tr>" for row in map_table)}
                </table>
            </div>
            """,
            unsafe_allow_html=True
        )
        
    except Exception as e:
        st.error(f"L·ªói khi hi·ªÉn th·ªã b·∫£n ƒë·ªì: {str(e)}")
        # Cung c·∫•p map_data, v√† start_pos (n·∫øu c√≥, gi·∫£ s·ª≠ l√† (x,y)) cho h√†m fallback
        _draw_map_simple(map_data, start_pos if start_pos else None)

def draw_route(map_data, route):
    """
    V·∫Ω tuy·∫øn ƒë∆∞·ªùng tr√™n b·∫£n ƒë·ªì s·ª≠ d·ª•ng th√†nh ph·∫ßn b·∫£n ƒë·ªãa c·ªßa Streamlit
    
    Parameters:
    - map_data: ƒê·ªëi t∆∞·ª£ng Map ch·ª©a th√¥ng tin b·∫£n ƒë·ªì
    - route: Danh s√°ch c√°c v·ªã tr√≠ [(row1, col1), (row2, col2), ...] th·ªÉ hi·ªán tuy·∫øn ƒë∆∞·ªùng
    """
    try:
        # L·∫•y grid t·ª´ map_data
        grid = get_grid_from_map_data(map_data)
        
        # Ki·ªÉm tra xem ƒë∆∞·ªùng ƒëi c√≥ ch·ª©a √¥ ch∆∞·ªõng ng·∫°i v·∫≠t kh√¥ng
        if route:
            obstacle_positions = []
            for pos in route:
                if is_obstacle_cell(grid, pos):
                    obstacle_positions.append(pos)
            
            if obstacle_positions:
                st.error(f"‚ö†Ô∏è L·ªñI NGHI√äM TR·ªåNG: ƒê∆∞·ªùng ƒëi ch·ª©a {len(obstacle_positions)} √¥ ch∆∞·ªõng ng·∫°i v·∫≠t t·∫°i v·ªã tr√≠: {obstacle_positions[:5]}{'...' if len(obstacle_positions) > 5 else ''}")
                st.warning("ƒê∆∞·ªùng ƒëi kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i thu·∫≠t to√°n t√¨m ƒë∆∞·ªùng.")
        
        if not route or len(route) < 2:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ ƒë·ªß ƒëi·ªÉm ƒë·ªÉ hi·ªÉn th·ªã tuy·∫øn ƒë∆∞·ªùng!")
            draw_map(map_data, route[0] if route and len(route) > 0 else None)
            return
        
        st.write("### üó∫Ô∏è B·∫£n ƒë·ªì v·ªõi Tuy·∫øn ƒê∆∞·ªùng")
        
        # S·ª≠ d·ª•ng emoji tr·ª±c ti·∫øp thay v√¨ icon
        emojis = {
            'truck': 'üöö',
            'gas': '‚õΩ',
            'toll': 'üöß',
            'brick': 'üß±',
            'road': 'üõ£Ô∏è',
            'route': 'üìç', # Emoji cho c√°c b∆∞·ªõc tr√™n tuy·∫øn ƒë∆∞·ªùng
            'start': 'üö©', # Emoji cho ƒëi·ªÉm b·∫Øt ƒë·∫ßu
            'end': 'üèÅ',   # Emoji cho ƒëi·ªÉm k·∫øt th√∫c
            'error': '‚ùå'   # Emoji cho √¥ l·ªói (ƒëi qua ch∆∞·ªõng ng·∫°i v·∫≠t)
        }
        
        # L·∫•y k√≠ch th∆∞·ªõc c·ªßa grid
        size = grid.shape[0] if hasattr(grid, 'shape') else len(grid)
        
        # T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi tuy·∫øn ƒë∆∞·ªùng
        map_data_display = []
        for i in range(size):
            row = []
            for j in range(size):
                cell_type = grid[i][j]
                route_marker = ""
                is_obstacle = is_obstacle_cell(grid, (i, j))
                
                # X√°c ƒë·ªãnh v·ªã tr√≠ trong tuy·∫øn ƒë∆∞·ªùng
                if (i, j) in route:
                    pos_index = route.index((i, j))
                    if pos_index == 0:
                        # ƒêi·ªÉm b·∫Øt ƒë·∫ßu
                        emoji = emojis['truck']
                        route_marker = "1"
                    elif pos_index == len(route) - 1:
                        # ƒêi·ªÉm k·∫øt th√∫c
                        emoji = emojis['end']
                        route_marker = str(len(route))
                    else:
                        # ƒêi·ªÉm tr√™n tuy·∫øn ƒë∆∞·ªùng
                        if is_obstacle:
                            emoji = emojis['error']  # ƒê√°nh d·∫•u l·ªói
                        elif cell_type == 1:
                            emoji = emojis['toll']
                        elif cell_type == 2:
                            emoji = emojis['gas']
                        else:
                            emoji = emojis['road']
                        route_marker = str(pos_index + 1)
                else:
                    # V·ªã tr√≠ kh√¥ng n·∫±m tr√™n tuy·∫øn ƒë∆∞·ªùng
                    if is_obstacle:
                        emoji = emojis['brick']
                    elif cell_type == 1:
                        emoji = emojis['toll']
                    elif cell_type == 2:
                        emoji = emojis['gas']
                    else:
                        emoji = emojis['road']
                
                # Th√™m s·ªë th·ª© t·ª± v√†o c√°c √¥ tr√™n tuy·∫øn ƒë∆∞·ªùng
                if route_marker:
                    if (i, j) == route[0]:
                        cell_display = f"{emoji} {emojis['start']}{route_marker}"
                    elif (i, j) == route[-1]:
                        cell_display = f"{emoji} {emojis['end']}{route_marker}"
                    else:
                        if is_obstacle:
                            cell_display = f"{emoji} {emojis['error']}{route_marker}"
                        else:
                            cell_display = f"{emoji} {emojis['route']}{route_marker}"
                else:
                    cell_display = emoji
                
                row.append(cell_display)
            map_data_display.append(row)
        
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng
        st.table(map_data_display)
        
        # Hi·ªÉn th·ªã th√¥ng tin tuy·∫øn ƒë∆∞·ªùng
        st.info("üìç Th√¥ng tin tuy·∫øn ƒë∆∞·ªùng")
        total_toll = sum(1 for pos in route if grid[pos[1]][pos[0]] == 1)
        total_gas = sum(1 for pos in route if grid[pos[1]][pos[0]] == 2)
        total_obstacles = sum(1 for pos in route if is_obstacle_cell(grid, pos))
        
        route_info_cols = st.columns(4)
        with route_info_cols[0]:
            st.metric("ƒê·ªô d√†i tuy·∫øn ƒë∆∞·ªùng", f"{len(route) - 1} b∆∞·ªõc")
        with route_info_cols[1]:
            st.metric("Tr·∫°m thu ph√≠", total_toll)
        with route_info_cols[2]:
            st.metric("Tr·∫°m xƒÉng", total_gas)
        with route_info_cols[3]:
            if total_obstacles > 0:
                st.metric("√î ch∆∞·ªõng ng·∫°i v·∫≠t", total_obstacles, delta=-total_obstacles, delta_color="inverse")
            else:
                st.metric("√î ch∆∞·ªõng ng·∫°i v·∫≠t", 0)
        
        if total_obstacles > 0:
            st.error("‚ö†Ô∏è ƒê∆∞·ªùng ƒëi qua ch∆∞·ªõng ng·∫°i v·∫≠t kh√¥ng h·ª£p l·ªá!")
        
    except Exception as e:
        st.error(f"L·ªói khi hi·ªÉn th·ªã tuy·∫øn ƒë∆∞·ªùng: {str(e)}")
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì b√¨nh th∆∞·ªùng khi c√≥ l·ªói
        draw_map(map_data, route[0] if route and len(route) > 0 else None)

def draw_animation(map_data, states):
    """
    T·∫°o animation cho qu√° tr√¨nh di chuy·ªÉn s·ª≠ d·ª•ng th√†nh ph·∫ßn b·∫£n ƒë·ªãa c·ªßa Streamlit
    
    Parameters:
    - map_data: ƒê·ªëi t∆∞·ª£ng Map ch·ª©a th√¥ng tin b·∫£n ƒë·ªì
    - states: Danh s√°ch c√°c tr·∫°ng th√°i [(pos1, fuel1), (pos2, fuel2), ...]
    """
    if not states or len(states) < 2:
        st.warning("‚ö†Ô∏è Kh√¥ng ƒë·ªß tr·∫°ng th√°i ƒë·ªÉ t·∫°o animation!")
        if states and len(states) > 0:
            draw_map(map_data, states[0][0])  # Ch·ªâ hi·ªÉn th·ªã v·ªã tr√≠ ƒë·∫ßu ti√™n
        return
    
    try:
        # L·∫•y danh s√°ch c√°c v·ªã tr√≠ t·ª´ states
        positions = [state[0] for state in states]
        fuels = [state[1] for state in states]
        
        # Hi·ªÉn th·ªã b·∫£ng ƒëi·ªÅu khi·ªÉn animation
        st.subheader("üé¨ Animation")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            step = st.slider("B∆∞·ªõc di chuy·ªÉn", 0, len(states) - 1, 0)
        
        with col2:
            st.text("Step: " + str(step+1) + "/" + str(len(states)))
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
        current_pos = positions[step]
        current_fuel = fuels[step]
        
        # T·∫°o b·∫£n ƒë·ªì v·ªõi v·ªã tr√≠ hi·ªán t·∫°i ƒë∆∞·ª£c ƒë√°nh d·∫•u
        grid = map_data.grid
        size = grid.shape[0]
        
        # S·ª≠ d·ª•ng emoji tr·ª±c ti·∫øp thay v√¨ icon
        emojis = {
            'truck': 'üöö',
            'gas': '‚õΩ',
            'toll': 'üöß',
            'brick': 'üß±',
            'road': 'üõ£Ô∏è',
            'route': 'üìç', # Emoji cho c√°c b∆∞·ªõc ƒë√£ ƒëi qua
            'current': 'üìå' # Emoji cho v·ªã tr√≠ hi·ªán t·∫°i
        }
        
        # T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi tuy·∫øn ƒë∆∞·ªùng v√† v·ªã tr√≠ hi·ªán t·∫°i
        map_data_display = []
        for i in range(size):
            row = []
            for j in range(size):
                cell_type = grid[i][j]
                position_marker = ""
                
                # X√°c ƒë·ªãnh v·ªã tr√≠ hi·ªán t·∫°i v√† ƒë√£ ƒëi qua
                if (i, j) == current_pos:
                    # V·ªã tr√≠ hi·ªán t·∫°i
                    emoji = emojis['truck']
                    position_marker = "current"
                elif (i, j) in positions[:step]:
                    # V·ªã tr√≠ ƒë√£ ƒëi qua
                    if cell_type == 1:
                        emoji = emojis['toll']
                    elif cell_type == 2:
                        emoji = emojis['gas']
                    elif cell_type == -1:
                        emoji = emojis['brick']
                    else:
                        emoji = emojis['road']
                    position_marker = "past"
                else:
                    # V·ªã tr√≠ b√¨nh th∆∞·ªùng
                    if cell_type == -1:
                        emoji = emojis['brick']
                    else:
                        emoji = emojis['road']
                
                # Th√™m ƒë√°nh d·∫•u v√†o c√°c √¥ ƒë√£ ƒëi qua v√† v·ªã tr√≠ hi·ªán t·∫°i
                if position_marker == "current":
                    cell_display = f"{emoji} {emojis['current']}"
                elif position_marker == "past":
                    cell_display = f"{emoji} {emojis['route']}"
                else:
                    cell_display = emoji
                
                row.append(cell_display)
            map_data_display.append(row)
        
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng
        st.table(map_data_display)
        
        # Hi·ªÉn th·ªã l∆∞·ª£ng nhi√™n li·ªáu
        st.subheader("üöö Tr·∫°ng th√°i hi·ªán t·∫°i")
        status_cols = st.columns(2)
        
        with status_cols[0]:
            st.metric("V·ªã tr√≠", f"[{current_pos[0]}, {current_pos[1]}]")
        
        with status_cols[1]:
            st.metric("L∆∞·ª£ng nhi√™n li·ªáu", f"{current_fuel:.1f}")
            
        # Thanh nhi√™n li·ªáu
        fuel_percentage = current_fuel * 100 / 20.0  # Gi·∫£ s·ª≠ nhi√™n li·ªáu t·ªëi ƒëa l√† 10
        


        # S·ª≠ d·ª•ng progress bar c·ªßa Streamlit
        fuel_color = "normal"
        if fuel_percentage <= 10:
            st.error(f"Nhi√™n li·ªáu: {fuel_percentage:.1f}%")
        elif fuel_percentage <= 30:
            st.warning(f"Nhi√™n li·ªáu: {fuel_percentage:.1f}%")
        else:
            st.success(f"Nhi√™n li·ªáu: {fuel_percentage:.1f}%")
            
        st.progress(fuel_percentage/100.0)  # Streamlit progress nh·∫≠n gi√° tr·ªã t·ª´ 0-1
    
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o animation: {str(e)}")
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì th√¥ng th∆∞·ªùng
        if states and len(states) > 0:
            draw_map(map_data, states[0][0])  # Ch·ªâ hi·ªÉn th·ªã v·ªã tr√≠ ƒë·∫ßu ti√™n