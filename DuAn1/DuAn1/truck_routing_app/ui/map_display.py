"""
Map display module for visualizing the routing environment.
Implements functions for drawing maps, routes, and animations using Streamlit.
"""

import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import os
import numpy as np
import io
import math


# ƒê∆∞·ªùng d·∫´n t·ªõi c√°c icon
ICONS_PATH = os.path.join(os.path.dirname(__file__), 'units')

def create_basic_icon(emoji, size=(64, 64), bg_color=None):
    """
    T·∫°o icon ƒë∆°n gi·∫£n v·ªõi emoji
    
    Parameters:
    - emoji: Emoji text hi·ªÉn th·ªã 
    - size: K√≠ch th∆∞·ªõc icon
    - bg_color: M√†u n·ªÅn
    
    Returns:
    - ƒê·ªëi t∆∞·ª£ng h√¨nh ·∫£nh PIL
    """
    try:
        # T·∫°o h√¨nh n·ªÅn
        img = Image.new("RGBA", size, bg_color if bg_color else (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # C·ªë g·∫Øng load font emoji
        try:
            # Th·ª≠ t·∫£i font c√≥ h·ªó tr·ª£ emoji v·ªõi k√≠ch th∆∞·ªõc l·ªõn
            font_size = int(size[0] * 0.6)  # 60% k√≠ch th∆∞·ªõc icon
            try:
                # Th·ª≠ c√°c font ph·ªï bi·∫øn h·ªó tr·ª£ emoji
                font_options = ["segoe ui emoji", "apple color emoji", "noto color emoji", "arial", "sans-serif"]
                font = None
                
                for font_name in font_options:
                    try:
                        font = ImageFont.truetype(font_name, font_size)
                        break
                    except:
                        continue
                
                if font is None:
                    font = ImageFont.load_default()
            except:
                font = ImageFont.load_default()
        except:
            font = ImageFont.load_default()
        
        # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ ƒë·∫∑t emoji gi·ªØa h√¨nh
        try:
            # Ph∆∞∆°ng th·ª©c m·ªõi trong Pillow m·ªõi h∆°n
            left, top, right, bottom = draw.textbbox((0, 0), emoji, font=font)
            text_width = right - left
            text_height = bottom - top
        except AttributeError:
            # Fallback cho Pillow c≈© h∆°n
            try:
                text_width, text_height = draw.textsize(emoji, font=font)
            except:
                text_width, text_height = font_size, font_size
                
        position = ((size[0] - text_width) // 2, (size[1] - text_height) // 2)
        
        # V·∫Ω emoji
        draw.text(position, emoji, fill="white", font=font)
        
        return img
    except Exception as e:
        # T·∫°o m·ªôt icon ƒë∆°n gi·∫£n n·∫øu c√≥ l·ªói
        img = Image.new("RGBA", size, bg_color if bg_color else (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # V·∫Ω m·ªôt h√¨nh vu√¥ng v·ªõi ch·ªØ c√°i ƒë·∫ßu ti√™n
        if emoji and len(emoji) > 0:
            letter = emoji[0] if isinstance(emoji, str) else "?"
            # V·∫Ω ch·ªØ c√°i ·ªü gi·ªØa
            draw.text((size[0]//3, size[1]//3), letter, fill="white")
        
        return img

def load_modern_icons():
    """T·∫°o c√°c icon hi·ªán ƒë·∫°i cho b·∫£n ƒë·ªì"""
    icons = {}
    
    # M√†u s·∫Øc theo phong c√°ch Material Design
    colors = {
        'truck': (33, 150, 243, 255),    # Xanh d∆∞∆°ng - #2196F3
        'gas': (76, 175, 80, 255),       # Xanh l√° - #4CAF50
        'toll': (244, 67, 54, 255),      # ƒê·ªè - #F44336
        'brick': (121, 85, 72, 255),     # N√¢u - #795548
        'road': (66, 66, 66, 255)        # X√°m ƒë·∫≠m - #424242
    }
    
    # Emoji text ƒë∆°n gi·∫£n 
    emojis = {
        'truck': 'üöö',
        'gas': '‚õΩ',
        'toll': 'üöß',
        'brick': 'üß±',
        'road': 'üõ£Ô∏è'
    }
    
    # T·∫°o c√°c icon
    for name, color in colors.items():
        try:
            icons[name] = create_basic_icon(
                emojis[name], 
                bg_color=color
            )
        except Exception as e:
            # T·∫°o icon d·ª± ph√≤ng n·∫øu g·∫∑p l·ªói
            img = Image.new("RGBA", (64, 64), color)
            draw = ImageDraw.Draw(img)
            draw.rectangle([5, 5, 59, 59], fill=color, outline=(255, 255, 255, 128))
            icons[name] = img
    
    return icons

# Bi·∫øn global ƒë·ªÉ l∆∞u tr·ªØ c√°c icon ƒë√£ t·∫£i
ICONS = None

def get_icons():
    """Tr·∫£ v·ªÅ c√°c icon ƒë√£ t·∫£i ho·∫∑c t·∫£i m·ªõi n·∫øu ch∆∞a c√≥"""
    global ICONS
    if ICONS is None:
        try:
            ICONS = load_modern_icons()
        except Exception:
            # T·∫°o icons ƒë∆°n gi·∫£n n·∫øu c√≥ l·ªói
            ICONS = {
                'truck': Image.new("RGBA", (64, 64), (33, 150, 243, 255)),
                'gas': Image.new("RGBA", (64, 64), (76, 175, 80, 255)),
                'toll': Image.new("RGBA", (64, 64), (244, 67, 54, 255)),
                'brick': Image.new("RGBA", (64, 64), (121, 85, 72, 255)),
                'road': Image.new("RGBA", (64, 64), (66, 66, 66, 255))
            }
    return ICONS

def get_cell_type_name(cell_type):
    """Tr·∫£ v·ªÅ t√™n lo·∫°i √¥ d·ª±a tr√™n gi√° tr·ªã"""
    types = {
        -1: "V·ªã tr√≠ xe t·∫£i",
        0: "ƒê∆∞·ªùng th√¥ng th∆∞·ªùng",
        1: "Tr·∫°m thu ph√≠",
        2: "Tr·∫°m xƒÉng",
        3: "V·∫≠t c·∫£n"
    }
    return types.get(cell_type, "Kh√¥ng x√°c ƒë·ªãnh")

def _draw_map_simple(map_data, start_pos=None):
    """Phi√™n b·∫£n ƒë∆°n gi·∫£n nh·∫•t cho hi·ªÉn th·ªã b·∫£n ƒë·ªì khi c√≥ l·ªói"""
    grid = map_data.grid
    size = grid.shape[0]
    
    # S·ª≠ d·ª•ng start_pos t·ª´ tham s·ªë n·∫øu ƒë∆∞·ª£c cung c·∫•p, n·∫øu kh√¥ng l·∫•y t·ª´ map_data
    if start_pos is None and hasattr(map_data, 'start_pos'):
        start_pos = map_data.start_pos
        
    # L·∫•y end_pos t·ª´ map_data n·∫øu c√≥
    end_pos = None
    if hasattr(map_data, 'end_pos'):
        end_pos = map_data.end_pos
    
    st.write("#### B·∫£n ƒë·ªì (Phi√™n b·∫£n ƒë∆°n gi·∫£n)")
    
    emojis = {
        'truck': 'üöö',
        'gas': '‚õΩ',
        'toll': 'üöß',
        'brick': 'üß±',
        'road': 'üõ£Ô∏è',
        'end': 'üèÅ'
    }
    
    # T·∫°o b·∫£ng d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì
    map_table = []
    for i in range(size):
        row = []
        for j in range(size):
            cell_type = grid[i][j]
            
            # X√°c ƒë·ªãnh emoji hi·ªÉn th·ªã
            if start_pos and (i, j) == start_pos:
                emoji = emojis['truck']
            elif end_pos and (i, j) == end_pos:
                emoji = emojis['end']
            elif cell_type == 1:
                emoji = emojis['toll']
            elif cell_type == 2:
                emoji = emojis['gas']
            elif cell_type == 3:
                emoji = emojis['brick']
            else:
                emoji = emojis['road']
                
            row.append(emoji)
        map_table.append(row)
    
    # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng
    st.table(map_table)

def draw_map(map_data, start_pos=None, visited=None, current_neighbors=None, current_pos=None, path=None):
    """
    V·∫Ω b·∫£n ƒë·ªì v·ªõi c√°c icon s·ª≠ d·ª•ng th√†nh ph·∫ßn b·∫£n ƒë·ªãa c·ªßa Streamlit
    
    Parameters:
    - map_data: ƒê·ªëi t∆∞·ª£ng Map ch·ª©a th√¥ng tin b·∫£n ƒë·ªì
    - start_pos: Tuple (row, col) ch·ªâ v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa xe (n·∫øu c√≥)
    - visited: List c√°c v·ªã tr√≠ ƒë√£ thƒÉm
    - current_neighbors: List c√°c v·ªã tr√≠ h√†ng x√≥m ƒëang x√©t
    - current_pos: Tuple (row, col) ch·ªâ v·ªã tr√≠ hi·ªán t·∫°i
    - path: List c√°c v·ªã tr√≠ tr√™n ƒë∆∞·ªùng ƒëi t√¨m ƒë∆∞·ª£c
    """
    try:
        grid = map_data.grid
        size = grid.shape[0]
        
        # S·ª≠ d·ª•ng start_pos t·ª´ tham s·ªë n·∫øu ƒë∆∞·ª£c cung c·∫•p, n·∫øu kh√¥ng l·∫•y t·ª´ map_data
        if start_pos is None and hasattr(map_data, 'start_pos'):
            start_pos = map_data.start_pos
            
        # L·∫•y end_pos t·ª´ map_data n·∫øu c√≥
        end_pos = None
        if hasattr(map_data, 'end_pos'):
            end_pos = map_data.end_pos
        
        st.write("### üó∫Ô∏è B·∫£n ƒë·ªì")
        
        # CSS cho b·∫£n ƒë·ªì v√† animation
        st.markdown("""
        <style>
        .map-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .map-container table {
            border-collapse: collapse;
        }
        .map-container td {
            width: 60px;
            height: 60px;
            text-align: center;
            font-size: 24px;
            padding: 0;
            position: relative;
            transition: all 0.3s ease;
        }
        .map-container td > div {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.3s ease;
        }
        .visited-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(100, 181, 246, 0.6) !important;
            z-index: 1;
            animation: fadeIn 0.5s ease;
        }
        .neighbor-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 215, 0, 0.3);
            border: 2px dashed #ffd700;
            z-index: 2;
            animation: pulse 1s infinite;
        }
        .current-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 69, 0, 0.5);
            z-index: 3;
            animation: highlight 1s infinite;
        }
        .path-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(76, 175, 80, 0.5);
            border: 2px solid #4CAF50;
            z-index: 2;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes pulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.05); opacity: 0.5; }
            100% { transform: scale(1); opacity: 0.8; }
        }
        @keyframes highlight {
            0% { background-color: rgba(255, 69, 0, 0.5); }
            50% { background-color: rgba(255, 69, 0, 0.8); }
            100% { background-color: rgba(255, 69, 0, 0.5); }
        }
        .cell-content {
            position: relative;
            z-index: 4;
        }
        </style>
        """, unsafe_allow_html=True)
        
        # T·∫°o b·∫£ng d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì
        map_table = []
        for i in range(size):
            row = []
            for j in range(size):
                cell_type = grid[i][j]
                
                # X√°c ƒë·ªãnh emoji v√† background color cho √¥
                if current_pos and (i, j) == current_pos:
                    cell_content = "üöö"
                    bg_color = "#e3f2fd"
                elif start_pos and (i, j) == start_pos and not current_pos and not visited:  # Ch·ªâ hi·ªÉn th·ªã xe ·ªü v·ªã tr√≠ b·∫Øt ƒë·∫ßu khi ch∆∞a b·∫Øt ƒë·∫ßu tr·ª±c quan
                    cell_content = "üöö"
                    bg_color = "#e3f2fd"
                elif end_pos and (i, j) == end_pos:
                    cell_content = "üèÅ"
                    bg_color = "#fff9c4"
                elif cell_type == 1:
                    cell_content = "üöß"
                    bg_color = "#ffebee"
                elif cell_type == 2:
                    cell_content = "‚õΩ"
                    bg_color = "#e8f5e9"
                elif cell_type == 3:
                    cell_content = "üß±"
                    bg_color = "#efebe9"
                else:
                    cell_content = "‚¨ú"
                    bg_color = "#ffffff"
                
                # Th√™m overlay cho c√°c hi·ªáu ·ª©ng
                overlays = ""
                if visited and (i, j) in visited:
                    overlays += '<div class="visited-overlay"></div>'
                if current_neighbors and (i, j) in current_neighbors:
                    overlays += '<div class="neighbor-overlay"></div>'
                if current_pos and (i, j) == current_pos:
                    overlays += '<div class="current-overlay"></div>'
                if path and (i, j) in path:
                    overlays += '<div class="path-overlay"></div>'
                    if not current_pos or (i, j) != current_pos:  # Kh√¥ng hi·ªÉn th·ªã m≈©i t√™n n·∫øu l√† v·ªã tr√≠ hi·ªán t·∫°i
                        if (i, j) != path[-1]:  # Kh√¥ng hi·ªÉn th·ªã m≈©i t√™n ·ªü ƒëi·ªÉm cu·ªëi
                            next_pos = path[path.index((i, j)) + 1]
                            # X√°c ƒë·ªãnh h∆∞·ªõng m≈©i t√™n
                            if next_pos[0] < i:
                                cell_content = "‚¨ÜÔ∏è"  # L√™n
                            elif next_pos[0] > i:
                                cell_content = "‚¨áÔ∏è"  # Xu·ªëng
                            elif next_pos[1] < j:
                                cell_content = "‚¨ÖÔ∏è"  # Tr√°i
                            else:
                                cell_content = "‚û°Ô∏è"  # Ph·∫£i
                
                # T·∫°o cell v·ªõi background color v√† overlay
                cell = f'<div style="background-color: {bg_color};">{overlays}<div class="cell-content">{cell_content}</div></div>'
                row.append(cell)
            map_table.append(row)
        
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng v·ªõi HTML
        st.markdown(
            f"""
            <div class="map-container">
                <table>
                    {''.join(f"<tr>{''.join(f'<td>{cell}</td>' for cell in row)}</tr>" for row in map_table)}
                </table>
            </div>
            """,
            unsafe_allow_html=True
        )
        
    except Exception as e:
        st.error(f"L·ªói khi hi·ªÉn th·ªã b·∫£n ƒë·ªì: {str(e)}")
        _draw_map_simple(map_data, start_pos)

def draw_route(map_data, route):
    """
    V·∫Ω tuy·∫øn ƒë∆∞·ªùng tr√™n b·∫£n ƒë·ªì s·ª≠ d·ª•ng th√†nh ph·∫ßn b·∫£n ƒë·ªãa c·ªßa Streamlit
    
    Parameters:
    - map_data: ƒê·ªëi t∆∞·ª£ng Map ch·ª©a th√¥ng tin b·∫£n ƒë·ªì
    - route: Danh s√°ch c√°c v·ªã tr√≠ [(row1, col1), (row2, col2), ...] th·ªÉ hi·ªán tuy·∫øn ƒë∆∞·ªùng
    """
    if not route or len(route) < 2:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ tuy·∫øn ƒë∆∞·ªùng ƒë·ªÉ hi·ªÉn th·ªã!")
        draw_map(map_data, route[0] if route else None)
        return
    
    try:
        grid = map_data.grid
        size = grid.shape[0]
        
        st.write("### üó∫Ô∏è B·∫£n ƒë·ªì v·ªõi Tuy·∫øn ƒê∆∞·ªùng")
        
        # S·ª≠ d·ª•ng emoji tr·ª±c ti·∫øp thay v√¨ icon
        emojis = {
            'truck': 'üöö',
            'gas': '‚õΩ',
            'toll': 'üöß',
            'brick': 'üß±',
            'road': 'üõ£Ô∏è',
            'route': 'üìç', # Emoji cho c√°c b∆∞·ªõc tr√™n tuy·∫øn ƒë∆∞·ªùng
            'start': 'üö©', # Emoji cho ƒëi·ªÉm b·∫Øt ƒë·∫ßu
            'end': 'üèÅ'    # Emoji cho ƒëi·ªÉm k·∫øt th√∫c
        }
        
        # T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi tuy·∫øn ƒë∆∞·ªùng
        map_data_display = []
        for i in range(size):
            row = []
            for j in range(size):
                cell_type = grid[i][j]
                route_marker = ""
                
                # X√°c ƒë·ªãnh v·ªã tr√≠ trong tuy·∫øn ƒë∆∞·ªùng
                if (i, j) == route[0]:
                    # ƒêi·ªÉm b·∫Øt ƒë·∫ßu
                    emoji = emojis['truck']
                    route_marker = "1"
                elif (i, j) == route[-1]:
                    # ƒêi·ªÉm k·∫øt th√∫c
                    if cell_type == 1:
                        emoji = emojis['toll']
                    elif cell_type == 2:
                        emoji = emojis['gas']
                    elif cell_type == 3:
                        emoji = emojis['brick']
                    else:
                        emoji = emojis['road']
                    route_marker = str(len(route))
                elif (i, j) in route:
                    # ƒêi·ªÉm tr√™n tuy·∫øn ƒë∆∞·ªùng
                    if cell_type == 1:
                        emoji = emojis['toll']
                    elif cell_type == 2:
                        emoji = emojis['gas']
                    elif cell_type == 3:
                        emoji = emojis['brick']
                    else:
                        emoji = emojis['road']
                    route_marker = str(route.index((i, j)) + 1)
                else:
                    # ƒêi·ªÉm kh√¥ng n·∫±m tr√™n tuy·∫øn ƒë∆∞·ªùng
                    if cell_type == 1:
                        emoji = emojis['toll']
                    elif cell_type == 2:
                        emoji = emojis['gas']
                    elif cell_type == 3:
                        emoji = emojis['brick']
                    else:
                        emoji = emojis['road']
                
                # Th√™m s·ªë th·ª© t·ª± v√†o c√°c √¥ tr√™n tuy·∫øn ƒë∆∞·ªùng
                if route_marker:
                    if (i, j) == route[0]:
                        cell_display = f"{emoji} {emojis['start']}{route_marker}"
                    elif (i, j) == route[-1]:
                        cell_display = f"{emoji} {emojis['end']}{route_marker}"
                    else:
                        cell_display = f"{emoji} {emojis['route']}{route_marker}"
                else:
                    cell_display = emoji
                
                row.append(cell_display)
            map_data_display.append(row)
        
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng
        st.table(map_data_display)
        
        # Hi·ªÉn th·ªã th√¥ng tin tuy·∫øn ƒë∆∞·ªùng
        st.info("üìç Th√¥ng tin tuy·∫øn ƒë∆∞·ªùng")
        total_toll = sum(1 for pos in route if grid[pos[0]][pos[1]] == 1)
        total_gas = sum(1 for pos in route if grid[pos[0]][pos[1]] == 2)
        
        route_info_cols = st.columns(3)
        with route_info_cols[0]:
            st.metric("ƒê·ªô d√†i tuy·∫øn ƒë∆∞·ªùng", f"{len(route) - 1} b∆∞·ªõc")
        with route_info_cols[1]:
            st.metric("Tr·∫°m thu ph√≠", total_toll)
        with route_info_cols[2]:
            st.metric("Tr·∫°m xƒÉng", total_gas)
        
    except Exception as e:
        st.error(f"L·ªói khi hi·ªÉn th·ªã tuy·∫øn ƒë∆∞·ªùng: {str(e)}")
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì b√¨nh th∆∞·ªùng khi c√≥ l·ªói
        draw_map(map_data, route[0] if route and len(route) > 0 else None)

def draw_animation(map_data, states):
    """
    T·∫°o animation cho qu√° tr√¨nh di chuy·ªÉn s·ª≠ d·ª•ng th√†nh ph·∫ßn b·∫£n ƒë·ªãa c·ªßa Streamlit
    
    Parameters:
    - map_data: ƒê·ªëi t∆∞·ª£ng Map ch·ª©a th√¥ng tin b·∫£n ƒë·ªì
    - states: Danh s√°ch c√°c tr·∫°ng th√°i [(pos1, fuel1), (pos2, fuel2), ...]
    """
    if not states or len(states) < 2:
        st.warning("‚ö†Ô∏è Kh√¥ng ƒë·ªß tr·∫°ng th√°i ƒë·ªÉ t·∫°o animation!")
        if states and len(states) > 0:
            draw_map(map_data, states[0][0])  # Ch·ªâ hi·ªÉn th·ªã v·ªã tr√≠ ƒë·∫ßu ti√™n
        return
    
    try:
        # L·∫•y danh s√°ch c√°c v·ªã tr√≠ t·ª´ states
        positions = [state[0] for state in states]
        fuels = [state[1] for state in states]
        
        # Hi·ªÉn th·ªã b·∫£ng ƒëi·ªÅu khi·ªÉn animation
        st.subheader("üé¨ Animation")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            step = st.slider("B∆∞·ªõc di chuy·ªÉn", 0, len(states) - 1, 0)
        
        with col2:
            st.text("Step: " + str(step+1) + "/" + str(len(states)))
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
        current_pos = positions[step]
        current_fuel = fuels[step]
        
        # T·∫°o b·∫£n ƒë·ªì v·ªõi v·ªã tr√≠ hi·ªán t·∫°i ƒë∆∞·ª£c ƒë√°nh d·∫•u
        grid = map_data.grid
        size = grid.shape[0]
        
        # S·ª≠ d·ª•ng emoji tr·ª±c ti·∫øp thay v√¨ icon
        emojis = {
            'truck': 'üöö',
            'gas': '‚õΩ',
            'toll': 'üöß',
            'brick': 'üß±',
            'road': 'üõ£Ô∏è',
            'route': 'üìç', # Emoji cho c√°c b∆∞·ªõc ƒë√£ ƒëi qua
            'current': 'üìå' # Emoji cho v·ªã tr√≠ hi·ªán t·∫°i
        }
        
        # T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi tuy·∫øn ƒë∆∞·ªùng v√† v·ªã tr√≠ hi·ªán t·∫°i
        map_data_display = []
        for i in range(size):
            row = []
            for j in range(size):
                cell_type = grid[i][j]
                position_marker = ""
                
                # X√°c ƒë·ªãnh v·ªã tr√≠ hi·ªán t·∫°i v√† ƒë√£ ƒëi qua
                if (i, j) == current_pos:
                    # V·ªã tr√≠ hi·ªán t·∫°i
                    emoji = emojis['truck']
                    position_marker = "current"
                elif (i, j) in positions[:step]:
                    # V·ªã tr√≠ ƒë√£ ƒëi qua
                    if cell_type == 1:
                        emoji = emojis['toll']
                    elif cell_type == 2:
                        emoji = emojis['gas']
                    elif cell_type == 3:
                        emoji = emojis['brick']
                    else:
                        emoji = emojis['road']
                    position_marker = "past"
                else:
                    # V·ªã tr√≠ b√¨nh th∆∞·ªùng
                    if cell_type == 1:
                        emoji = emojis['toll']
                    elif cell_type == 2:
                        emoji = emojis['gas']
                    elif cell_type == 3:
                        emoji = emojis['brick']
                    else:
                        emoji = emojis['road']
                
                # Th√™m ƒë√°nh d·∫•u v√†o c√°c √¥ ƒë√£ ƒëi qua v√† v·ªã tr√≠ hi·ªán t·∫°i
                if position_marker == "current":
                    cell_display = f"{emoji} {emojis['current']}"
                elif position_marker == "past":
                    cell_display = f"{emoji} {emojis['route']}"
                else:
                    cell_display = emoji
                
                row.append(cell_display)
            map_data_display.append(row)
        
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì d·∫°ng b·∫£ng
        st.table(map_data_display)
        
        # Hi·ªÉn th·ªã l∆∞·ª£ng nhi√™n li·ªáu
        st.subheader("üöö Tr·∫°ng th√°i hi·ªán t·∫°i")
        status_cols = st.columns(2)
        
        with status_cols[0]:
            st.metric("V·ªã tr√≠", f"[{current_pos[0]}, {current_pos[1]}]")
        
        with status_cols[1]:
            st.metric("L∆∞·ª£ng nhi√™n li·ªáu", f"{current_fuel:.1f}")
            
        # Thanh nhi√™n li·ªáu
        fuel_percentage = current_fuel * 100 / 20.0  # Gi·∫£ s·ª≠ nhi√™n li·ªáu t·ªëi ƒëa l√† 10
        


        # S·ª≠ d·ª•ng progress bar c·ªßa Streamlit
        fuel_color = "normal"
        if fuel_percentage <= 10:
            st.error(f"Nhi√™n li·ªáu: {fuel_percentage:.1f}%")
        elif fuel_percentage <= 30:
            st.warning(f"Nhi√™n li·ªáu: {fuel_percentage:.1f}%")
        else:
            st.success(f"Nhi√™n li·ªáu: {fuel_percentage:.1f}%")
            
        st.progress(fuel_percentage/100.0)  # Streamlit progress nh·∫≠n gi√° tr·ªã t·ª´ 0-1
    
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o animation: {str(e)}")
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì th√¥ng th∆∞·ªùng
        if states and len(states) > 0:
            draw_map(map_data, states[0][0])  # Ch·ªâ hi·ªÉn th·ªã v·ªã tr√≠ ƒë·∫ßu ti√™n